#---------------------------------------------------------------------------
#  (C) 1999 - 2002 Jacob Dreyer - Geotechnical Software Services
#  jacob.dreyer@geosoft.no - http://geosoft.no
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, 
#  MA  02111-1307, USA.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#
#  GnuMake crash course:
#
#  target : depends
#    rule
#
#  target  - the parameter given to make. I.e. what to build
#  depends - file or other targets target depends on
#  rule    - how to create target (note that rule is preceeded by a TAB char)
#  $(VAR)  - environment variable or variable defined above
#  $@      - Current target
#  $*      - Current target without extension
#  $<      - Current dependency
#
#---------------------------------------------------------------------------
IS_UNIX=1

#packages containing libraries
PackageLibs = \
	utils \
	visitors \
	math \
	types \
	primitives \
	nonbonded \
	parallel \
	UseTheForce \
	brains \
	io \
	integrators \
	constraints \
	minimizers \
	selection \
	restraints \
	lattice \
	hydrodynamics \
    antlr \
    mdParser

#packages containing applications
Applications = \
	applications/openmd \
	applications/dump2Xyz \
	applications/staticProps \
	applications/dynamicProps \
	applications/simpleBuilder \
	applications/randomBuilder \
	applications/nanoparticleBuilder \
	applications/thermalizer \
	applications/atom2md \
	applications/hydrodynamics \
	applications/utilities

Samples = \
	samples/builders \
	samples/alkane \
	samples/argon \
	samples/cutoff \
	samples/dipole \
	samples/gbljtest \
	samples/lipid \
	samples/metals/EAM \
	samples/metals/EAM/nanoparticle \
	samples/metals/EAM/nanorod \
	samples/metals/Sutton-Chen \
	samples/metals/surfaces \
	samples/metals/minimizer \
	samples/minimizer \
	samples/thermoIntegration/liquid \
	samples/thermoIntegration/solid \
    samples/water/dimer \
	samples/water/spce \
	samples/water/ssd \
	samples/water/ssde \
	samples/water/ssdrf \
	samples/water/ssd-ion \
	samples/water/tip3p_ice \
	samples/water/tip4p \
	samples/zcons  \
	samples/bond-order \
	samples/Madelung \
	samples/RNEMD \
	samples/SMIPD \
	samples/zeolite


IncludeDirs = \
	@FFTW_INC_DIR@ \
	@QHULL_INC_DIR@ \
	@OPENBABEL_INC_DIR@ \
	@ZLIB_INC_DIR@ 

LibraryDirs = \
	@FFTW_LIB_DIR@ \
	@QHULL_LIB_DIR@ \
	@OPENBABEL_LIB_DIR@ \
	@ZLIB_LIB_DIR@ 

Libraries = \
	@LIBS@ \
	@FFTW_LIBS@ \
	@QHULL@ \
	@OPENBABEL_LIB@ \
	@ZLIB@ 

OpenMDHome       = @OPENMD_HOME@
ForceParamDir   = $(OpenMDHome)/forceFields
SampleSimDir    = $(OpenMDHome)/samples
InstallBinDir   = $(OpenMDHome)/bin
InstallDocDir   = $(OpenMDHome)/doc
SvnDeclare     :=-DSVN_REV="$(shell svnversion -n . | sed -e "s/.*://" -e "s/\([0-9]*\).*/\1/" | grep "[0-9]")"
FrcDeclare      = -DFRC_PATH="$(ForceParamDir)"
UseSingle       = @USE_SINGLE_PRECISION@
ifeq "$(UseSingle)" "yes"
SingleDeclare   = -DSINGLE_PRECISION
else
SingleDeclare   = 
endif
ParallelDeclare = -DIS_MPI
SinglePrecision = -DSINGLE_PRECISION
UseMPI          = @USE_MPI@
LinkOptions = \
	@LDFLAGS@ \
	@CXXFLAGS@ 

ParallelLinkOptions = \
	@LDFLAGS@ \
	@CXXFLAGS@

#---------------------------------------------------------------------------
#
#  Directories
#
#---------------------------------------------------------------------------

SourceDir         = $(DEV_ROOT)/src
TargetDir         = $(DEV_ROOT)/obj
ParallelTargetDir = $(DEV_ROOT)/MPIobj
LibDir            = $(DEV_ROOT)/lib
MakeDir           = $(DEV_ROOT)/make
MainMakefile      = $(MakeDir)/Makefile
BinDir            = $(DEV_ROOT)/bin
DocDir            = $(DEV_ROOT)/doc
CurrentDir        = $(CURDIR)
CombinedStaticLib = $(LibDir)/libopenmd.a
CombinedParallelStaticLib = $(LibDir)/libopenmd_MPI.a

ifdef Source
#get the relative path of current package to source directory
# /home/maul/gezelter/src/code/src/UseTheForce/Darkside --> UseTheForce/Darkside
#Package          = $(shell echo $(CurrentDir) | sed -e 's/^.*\/src\/\(.*\)/\1/g')
#use shell script to get the absolute path and then rip it off from $(CurrentDir)
#Package          = $(subst $(shell cd $(SourceDir); pwd)/,,$(CurrentDir))
# REMINDER: We are now using the Package line in each subdir makefile.
# This avoids the strange path problem and the subshell

PackageList              = $(Package)
PackageSourceDir         = $(SourceDir)/$(Package)
PackageTargetDir         = $(TargetDir)
PackageParallelTargetDir = $(ParallelTargetDir)
JavaMainClass            = $(subst /,.,$(Package)).$(Main)
else
PackageList              = $(PackageLibs) $(JavaPackages) $(Applications)
endif

PackageListLoop          = $(patsubst %,$(SourceDir)/%/.loop,$(PackageList))

JRE                      = $(JAVA_HOME)/jre/lib/rt.jar

ifdef IS_UNIX
X = :
else
X = \;
endif

#---------------------------------------------------------------------------
#
#  Classification of files
#
#---------------------------------------------------------------------------

# Source
JavaFiles              = $(filter %.java,  $(Source))
CppFiles               = $(filter %.cpp,   $(Source))
CFiles                 = $(filter %.c,     $(Source))
FortranFiles           = $(filter %.f,     $(Source))
F90Files               = $(filter %.F90,   $(Source))
CorbaFiles             = $(filter %.idl,   $(Source))
LexFiles               = $(filter %.l,     $(Source))
YaccFiles              = $(filter %.y,     $(Source))
OtherSourceFiles       = $(filter-out $(JavaFiles) $(CppFiles) $(CFiles) \
		                      $(FortranFiles) $(F90Files) $(LexFiles) \
	                              $(YaccFiles) $(CorbaFiles), \
	                              $(Source))
ManifestFile           = $(PackageSourceDir)/Manifest

SourceFiles            = $(JavaFiles)\
                         $(CppFiles)\
                         $(CFiles)\
                         $(FortranFiles)\
                         $(F90Files)\
                         $(LexFiles)\
                         $(YaccFiles)

# Target
JavaClassFiles         = $(JavaFiles:%.java=  $(PackageTargetDir)/%.class)
JavaClassFilesRel      = $(JavaFiles:%.java=  $(Package)/%.class)
RmiStubFiles           = $(RmiSource:%.java=  $(PackageTargetDir)/%_Stub.class)
RmiSkeletonFiles       = $(RmiSource:%.java=  $(PackageTargetDir)/%_Skel.class)
JniClassFiles          = $(JniSource:%.java=  $(PackageTargetDir)/%.class)
JniHeaders             = $(JniSource:%.java=  $(PackageSourceDir)/%.h)
ObjectFiles            = $(CFiles:%.c=        $(PackageTargetDir)/%.o)\
                         $(CppFiles:%.cpp=    $(PackageTargetDir)/%.o)\
		         $(FortranFiles:%.f=  $(PackageTargetDir)/%.o)\
		         $(F90Files:%.F90=    $(PackageTargetDir)/%.o)\
		         $(LexFiles:%.l=      $(PackageTargetDir)/%.o)\
		         $(YaccFiles:%.y=     $(PackageTargetDir)/%.o)
ParallelObjectFiles    = $(CFiles:%.c=        $(PackageParallelTargetDir)/%.o)\
		         $(CppFiles:%.cpp=    $(PackageParallelTargetDir)/%.o)\
		         $(FortranFiles:%.f=  $(PackageParallelTargetDir)/%.o)\
		         $(F90Files:%.F90=    $(PackageParallelTargetDir)/%.o)\
		         $(LexFiles:%.l=      $(PackageParallelTargetDir)/%.o)\
		         $(YaccFiles:%.y=     $(PackageParallelTargetDir)/%.o)

DerivedSource          = $(YaccFiles:%.y=    %.h) \
	                 $(YaccFiles:%.y=    %.c) \
	                 $(LexFiles:%.l=     %.c)

DerivedCFiles          = $(YaccFiles:%.y=    %.c) \
	                 $(LexFiles:%.l=     %.c)

OtherTargetFiles       = $(OtherSourceFiles:%=$(PackageTargetDir)/%)

ThirdPartyJarsTmp = $(patsubst %,$(LibDir)/%,$(JavaLibraries))
ThirdPartyJars    = $(subst $(Space),$(X),$(ThirdPartyJarsTmp))

ifneq "$(words $(JavaFiles))" "0"
  JavaPackageName   = $(subst /,.,$(Package))
  JarFile           = $(LibDir)/$(subst /,,$(Package)).jar
endif

#if Main is defined, do not build library. It may not be true sometimes
ifneq  "$(words $(ObjectFiles) $(ParallelObjectFiles))" "0"
  DependencyFile    = $(PackageSourceDir)/Makedepend
  ifneq "$(words $(Main))" "0"
    Executable             = $(BinDir)/$(Main)
    ifeq "$(BuiltParallelExe)" "1"
      ParallelExecutable     = $(BinDir)/$(Main)_MPI
    endif
  else
    SharedLibrary          = $(LibDir)/lib$(subst /,,$(patsubst %,openmd_%,$(Package)))_UP.so
    StaticLibrary          = $(LibDir)/lib$(subst /,,$(patsubst %,openmd_%,$(Package)))_UP.a
    ParallelSharedLibrary  = $(LibDir)/lib$(subst /,,$(patsubst %,openmd_%,$(Package)))_MPI.so
    ParallelStaticLibrary  = $(LibDir)/lib$(subst /,,$(patsubst %,openmd_%,$(Package)))_MPI.a
  endif
endif

#
# Misc
#
ClassPath        = $(JRE)$(X)$(TargetDir)$(X)$(ThirdPartyJars)
JavaPackageNames = $(subst /,.,$(JavaPackages))
IncludePath      = -I$(SourceDir) $(IncludeDirs:%=-I%)
LibDirs          = -L$(LibDir)    $(LibraryDirs:%=-L%)
LocalLibs        = $(subst /,,$(patsubst %, openmd_%_UP, $(PackageLibs)))
ParallelLocalLibs= $(subst /,,$(patsubst %, openmd_%_MPI, $(PackageLibs))) 
LibList          = $(LocalLibs:%=-l%) $(Libraries)
LibNames         = $(LocalLibs:%=$(LibDir)/lib%.a)
ParallelLibList  = $(ParallelLocalLibs:%=-l%) $(Libraries)
ParallelLibNames = $(ParallelLocalLibs:%=$(LibDir)/lib%.a)


#---------------------------------------------------------------------------
#
#  Tools & Options
#
#---------------------------------------------------------------------------
Print                  = @echo
Move                   = mv -f
Copy                   = cp
CCompiler              = @CC@
CppCompiler            = @CXX@
Linker                 = @CXX@
MakeDepend             = makedepend
LN_S                   = @LN_S@
INSTALL                = @INSTALL@
EGREP                  = @EGREP@
InstallProgram         = @INSTALL_PROGRAM@
InstallScript          = @INSTALL_SCRIPT@
InstallData            = @INSTALL_DATA@
MkDir                  = @MKINSTALLDIRS@
Delete                 = rm -f
StaticArchiver         = @AR@
DynamicArchiver        = @CC@
FortranCompiler        = @FC@
JavaCompiler           = $(JAVA_HOME)/bin/javac
JavaArchiver           = $(JAVA_HOME)/bin/jar
JarSigner              = $(JAVA_HOME)/bin/jarsigner
JavadocGenerator       = $(JAVA_HOME)/bin/javadoc
JniCompiler            = $(JAVA_HOME)/bin/javah
RmiCompiler            = $(JAVA_HOME)/bin/rmic
JavaExecute            = $(JAVA_HOME)/bin/java
Purify                 = purify
WordCount              = wc
List                   = cat
Yacc                   = @YACC@
Lex                    = @LEX@
Ranlib                 = @RANLIB@
Doxygen                = @DOXYGEN@

MakeOptions            = -k
MakeDependOptions      = 
StaticArchiverOptions  = rc
DynamicArchiverOptions = -shared
JavaArchiverOptions    =
JniOptions             =
RmiOptions             = -d $(TargetDir) -classpath $(ClassPath) \
			 -sourcepath $(SourceDir)
COptions               = $(SvnDeclare) $(FrcDeclare) $(SingleDeclare) @CFLAGS@
CParallelOptions       = $(SvnDeclare) $(FrcDeclare) $(SingleDeclare) $(ParallelDeclare) @CFLAGS@
CppOptions             = $(SvnDeclare) $(FrcDeclare) $(SingleDeclare) @CXXFLAGS@
CppParallelOptions     = $(SvnDeclare) $(FrcDeclare) $(SingleDeclare) $(ParallelDeclare) @CXXFLAGS@
JavaCompilerOptions    = -d $(TargetDir) -classpath $(ClassPath) \
			 -sourcepath $(SourceDir) -deprecation
JavaRunOptions         = -classpath $(ClassPath) 
PurifyOptions          = 
JavadocOptions         = -d $(DocDir) \
			 -sourcepath $(SourceDir) \
			 -classpath $(ClassPath) \
			 -author \
			 -package \
			 -use \
			 -splitIndex \
			 -version \
			 -link file:$(JAVA_HOME)/docs/api \
			 -windowtitle $(JavadocWindowTitle) \
			 -doctitle $(JavadocDocTitle) \
			 -header $(JavadocHeader) \
			 -bottom $(JavadocFooter)
WordCountOptions       = -l

Empty                  =
Space                  = $(Empty) $(Empty)


#---------------------------------------------------------------------------
#
#  Install
#
#---------------------------------------------------------------------------

ifneq "$(words $(SampleFiles))" "0"
  MySample                 = $(subst $(shell cd $(DEV_ROOT)/samples; pwd)/,,$(CurrentDir))
  MyInstallDir             = $(SampleSimDir)/$(MySample)
  InstallFiles             = $(SampleFiles)
  InstallCommand           = $(InstallData)
endif

ifneq "$(words $(ScriptFiles))" "0"
  MyInstallDir             = $(InstallBinDir)
  InstallFiles             = $(ScriptFiles)
  InstallCommand           = $(InstallProgram)
endif

ifneq "$(words $(DocFiles))" "0"
  MyInstallDir             = $(InstallDocDir)
  InstallFiles             = $(DocFiles)
  InstallCommand           = $(InstallData)
endif

ifneq "$(words $(RootFiles))" "0"
  MyInstallDir             = $(OpenMDHome)
  InstallFiles             = $(RootFiles)
  InstallCommand           = $(InstallData)
endif

ifneq "$(words $(Main))" "0"
  MyInstallDir             = $(InstallBinDir)
  ifeq "$(UseMPI)" "yes"
    InstallFiles             = $(Executable) $(ParallelExecutable)
  else
    InstallFiles             = $(Executable)
  endif 
  InstallCommand           = $(InstallProgram)
  ifneq "$(words $(LinkTargets))" "0"
    MyLinkSource = $(patsubst %, $(MyInstallDir)/%,$(Main)) 
    MyLinkTargets = $(patsubst %, $(MyInstallDir)/%,$(LinkTargets))
  endif
endif

ifneq "$(words $(ForcefieldFiles))" "0"
  MyInstallDir             = $(ForceParamDir)
  InstallFiles             = $(ForcefieldFiles)
  InstallCommand           = $(InstallData)
endif

ifeq "$(words $(InstallFiles))" "0"
  InstallList            =
else
  InstallList            = $(patsubst %,$(DEV_ROOT)/%,$(Samples)) $(DEV_ROOT)/forceFields $(DocDir) $(patsubst %, $(SourceDir)/%,$(Applications)) $(DEV_ROOT)
endif

InstallListLoop          = $(patsubst %,$(SourceDir)/%/.install,$(PackageList))  $(patsubst %,%/.install,$(InstallList))



#---------------------------------------------------------------------------
#
# Rules
#
#---------------------------------------------------------------------------
default : build

%.loop :
	@$(MAKE) $(MakeOptions) -C $(subst .loop,,$@) _$(MAKECMDGOALS)all

# Create target directory
$(PackageTargetDir) :
	$(MkDir) $@

$(BinDir) :
	$(MkDir) $@

# .c -> .o
$(PackageTargetDir)/%.o : %.c $(MainMakefile)
	$(Print) $@
	$(CCompiler) $(COptions) -c $(IncludePath) $< -o $@

$(PackageParallelTargetDir)/%.o : %.c $(MainMakefile)
	$(Print) $@
	$(CCompiler) $(CParallelOptions) -c $(IncludePath) $< -o $@

ifeq "$(UseMPI)" "yes"
%.o : %.c $(MainMakefile)
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
	$(MAKE) $(MakeOptions) $(PackageParallelTargetDir)/$@
else
%.o : %.c $(MainMakefile)
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
endif

# .cpp -> .o
$(PackageTargetDir)/%.o : %.cpp $(MainMakefile)
	$(CppCompiler) $(CppOptions) -c $(IncludePath) $< -o $@

$(PackageParallelTargetDir)/%.o : %.cpp $(MainMakefile)
	$(CppCompiler) $(CppParallelOptions) -c $(IncludePath) $< -o $@

ifeq "$(UseMPI)" "yes"
%.o : %.cpp $(MainMakefile)
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
	$(MAKE) $(MakeOptions) $(PackageParallelTargetDir)/$@
else
%.o : %.cpp $(MainMakefile)
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
endif


# .java -> .class
$(PackageTargetDir)/%.class : $(PackageSourceDir)/%.java
	$(JavaCompiler) $(JavaCompilerOptions) $< 

%.class : $(PackageSourceDir)/%.java
	@$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@

# .class -> .h
$(PackageSourceDir)/%.h : $(PackageTargetDir)/%.class
	$(JniCompiler) $(JniOptions) $(JavaPackageName).$*

%.h : %.class
	$(MAKE) $(MakeOptions) $(PackageSourceDir)/$@

#.y -> .h
%.h : %.y
	$(Yacc) -d  $?
	@$(Move) y.tab.h $*.h
	@$(Delete) y.tab.c

#.y -> .c
%.c : %.y
	$(Yacc) -d  $?
	@$(Move) y.tab.c $*.c
	@$(Delete) y.tab.h

# .l -> .c
%.c : %.l
	$(Print) $@
	$(Print) $(Lex) -o$@ $?
	@$(Lex) -o$@ $?

# .o -> .a

$(LibDir)/%_UP.a : $(ObjectFiles)
	$(StaticArchiver) $(StaticArchiverOptions) $@ $(ObjectFiles)
	@touch $(LibDir)/.stamp_UP

$(LibDir)/%_MPI.a: $(ParallelObjectFiles)
	$(StaticArchiver) $(StaticArchiverOptions) $@ $(ParallelObjectFiles)
	@touch $(LibDir)/.stamp_MPI

%_UP.a : $(ObjectFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@

%_MPI.a : $(ParallelObjectFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@

# .o -> .so
$(LibDir)/%_UP.so : $(ObjectFiles)
	$(DynamicArchiver) $(ObjectFiles) $(DynamicArchiverOptions) -o $@

$(LibDir)/%_MPI.so : $(ParallelObjectFiles)
	$(DynamicArchiver) $(ParallelObjectFiles) $(DynamicArchiverOptions) -o $@

%_UP.so : $(ObjectFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@

%_MPI.so : $(ParallelObjectFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@

# .class -> .jar
$(LibDir)/%.jar : $(JavaClassFiles) $(OtherTargetFiles)
	$(Print) $@
	@cd $(TargetDir); $(JavaArchiver) -cf $@ \
	$(JavaClassFilesRel) $(OtherTargetFiles)

%.jar : $(JavaClassFiles) $(OtherTargetFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@

# .class -> JavaDoc
javadoc : 
	$(Print) $(JavaPackageNames) > $(DEV_ROOT)/packages.tmp
	$(JavadocGenerator) $(JavadocOptions) @$(DEV_ROOT)/packages.tmp
	$(Delete) $(DEV_ROOT)/packages.tmp
	$(Print) Done JavaDoc.

# .class -> _Stub.class 
$(PackageTargetDir)/%_Stub.class : $(PackageTargetDir)/%.class
	$(Print) $@
	$(RmiCompiler) $(RmiOptions) $(JavaPackageName).$*

%_Stub.class : %.class
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@

# .class -> _Skel.class
$(PackageTargetDir)/%_Skel.class : $(PackageTargetDir)/%.class
	$(Print) $@
	$(RmiCompiler) $(RmiOptions) $(JavaPackageName).$*

%_Skel.class : %.class
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@

document :
	$(Print) Generate Documentation for OpenMD
	@cd $(DEV_ROOT)/src	
	$(Doxygen) $(DEV_ROOT)/make/Doxyfile

#GUN make funtions to merge the libraries
find_objs = $(shell $(StaticArchiver) -t $(1) | $(EGREP) -v "SYMDEF")
extract_objs = $(shell $(StaticArchiver) -x $(1) $(call find_objs, $(1)))
create_archive = $(shell  $(StaticArchiver) $(StaticArchiverOptions) $(2) $(call find_objs, $(1)))
remove_objs = $(shell $(Delete) $(call find_objs, $(1)))
do_create = $(call extract_objs,$(1))$(call create_archive,$(1),$(2))$(call remove_objs,$(1))  
do_link = $(shell umask 022; $(LN_S) $(1) $(2))
all_objs = $(foreach thisLib,$(LibNames), $(call find_objs, $(thisLib)))
all_parallel_objs = $(foreach thisLib,$(ParallelLibNames), $(call find_objs, $(thisLib)))
all_lib_objs = $(patsubst %,$(TargetDir)/%,$(call all_objs))
all_lib_parallel_objs = $(patsubst %,$(ParallelTargetDir)/%,$(call all_parallel_objs))

$(CombinedStaticLib) : $(LibDir)/.stamp_UP
	$(Print) creating $@     	
	$(StaticArchiver) $(StaticArchiverOptions) $@ $(call all_lib_objs)
	$(Ranlib) $(CombinedStaticLib)

$(CombinedParallelStaticLib) : $(LibDir)/.stamp_MPI
	$(Print) creating $@
	$(StaticArchiver) $(StaticArchiverOptions) $@ $(call all_lib_parallel_objs)
	$(Ranlib) $(CombinedParallelStaticLib)

# Executable
$(Executable) : $(CombinedStaticLib) $(ObjectFiles)
	if test ! -d $(BinDir); then \
		$(MkDir) $(BinDir) ;\
	fi
	$(Linker) $(ObjectFiles) $(CombinedStaticLib) $(LinkOptions) $(LibDirs) $(Libraries) -o $@

$(ParallelExecutable) : $(CombinedParallelStaticLib) $(ParallelObjectFiles)
	if test ! -d $(BinDir); then \
		$(MkDir) $(BinDir) ;\
	fi
	$(Linker) $(ParallelObjectFiles) $(CombinedParallelStaticLib) $(ParallelLinkOptions) $(LibDirs) $(Libraries) -o $@

# Anything else is just copied from source to target
$(PackageTargetDir)/% : $(PackageSourceDir)/%
	$(Print) $@
	$(Copy) $< $@

# make (or make build)
build : $(PackageListLoop)
	$(Print) Done build.

_all : _buildall

_buildall : 
ifeq "$(UseMPI)" "yes"
_buildall : \
	$(DependencyFile) \
	$(PackageTargetDir) \
	$(ObjectFiles) \
	$(ParallelObjectFiles) \
	$(JavaClassFiles) \
	$(RmiStubFiles) \
	$(RmiSkeletonFiles) \
	$(OtherTargetFiles) \
	$(StaticLibrary) \
	$(ParallelStaticLibrary) \
	$(JarFile) \
	$(Executable) \
	$(ParallelExecutable) 
else
_buildall : \
	$(DependencyFile) \
	$(PackageTargetDir) \
	$(ObjectFiles) \
	$(JavaClassFiles) \
	$(RmiStubFiles) \
	$(RmiSkeletonFiles) \
	$(OtherTargetFiles) \
	$(StaticLibrary) \
	$(JarFile) \
	$(Executable) 
endif

echo : $(PackageListLoop)
	$(Print) Done echo.

_echoall :
	$(Print) $(Modules)

# make clean
clean : $(PackageListLoop)
	$(Print) Done clean.	

_cleanall :
	$(Delete) \
		$(ObjectFiles) \
		$(ModuleFiles) \
		$(ParallelObjectFiles) \
		$(ParallelModuleFiles) \
		$(JarFile) \
		$(SharedLibrary) \
		$(StaticLibrary) \
		$(ParallelSharedLibrary) \
		$(ParallelStaticLibrary) \
		$(CombinedStaticLib) \
		$(CombinedParallelStaticLib)

# make distclean
distclean : $(PackageListLoop)
	$(Print) Done clean.	

_distcleanall : _cleanall
	$(Delete) $(Executable) \
	          $(ParallelExecutable) \
	          $(DependencyFile) 

# make depend
depend : $(PackageListLoop)
	$(Print) Done dependencies.

_dependall : $(DependencyFile)

$(DependencyFile) : $(DerivedSource)
	$(Print) $@ 
	@cd $(PackageSourceDir)

ifneq "$(words $(CppFiles))" "0"
	$(DEV_ROOT)/scripts/filepp  -I $(DEV_ROOT)/src -od '$$(TargetDir)/' -MM $(CppFiles)>> Make.cpptemp
	@cat Make.cpptemp  >> $(DependencyFile)
	$(Delete) Make.cpptemp

  ifeq "$(UseMPI)" "yes"
	$(DEV_ROOT)/scripts/filepp  -I $(DEV_ROOT)/src -od '$$(ParallelTargetDir)/' $(ParallelDeclare) -MM $(CppFiles)>> Make.cpptemp
	@cat Make.cpptemp  >> $(DependencyFile)
	@$(Delete) Make.cpptemp
  endif

endif

ifneq "$(words $(CFiles))" "0" 
	$(DEV_ROOT)/scripts/filepp  -I $(DEV_ROOT)/src -od '$$(TargetDir)/'  -MM $(CFiles) $(DerivedCFiles)  >> Make.ctemp
	@cat Make.ctemp  >> $(DependencyFile)
	$(Delete) Make.ctemp

  ifeq "$(UseMPI)" "yes"
	$(DEV_ROOT)/scripts/filepp  -I $(DEV_ROOT)/src -od '$$(ParallelTargetDir)/' $(ParallelDeclare) -MM $(CFiles) $(DerivedCFiles)  >> Make.ctemp
	@cat Make.ctemp  >> $(DependencyFile)
	@$(Delete) Make.ctemp
  endif

endif

# make lib
lib    : $(PackageListLoop)
	$(Print) Libraries built.

_liball : $(JarFile) $(SharedLibrary) $(StaticLibrary)

jar : $(JarFile)

jarsign : $(JarFile)
	$(JarSigner) -keystore GeoSoftKeystore $(JarFile) myself

#make install
%.install :
	@$(MAKE) $(MakeOptions) -C $(subst .install,,$@) _installall 	

.install :
	@$(MAKE) $(MakeOptions) _installall 	

install : $(InstallListLoop)
	$(Print) Done Install

_installall : _buildall _installdata _installlinks

$(MyInstallDir) : 
	$(MkDir) $@

_installdata :  $(MyInstallDir)
	$(Print) $(InstallFiles) 
ifneq "$(words $(InstallFiles))" "0"
	$(InstallCommand) $(InstallFiles) $(MyInstallDir)
endif	    

_installlinks :  $(MyInstallDir)
ifneq "$(words $(MyLinkTargets))" "0"
	@cd $(MyInstallDir)
	$(foreach thisLink,$(MyLinkTargets),$(call do_link,$(MyLinkSource),$(thisLink)))
endif	    

# make statistics
_statisticsall :
	@$(Print) $(patsubst %,$(CurrentDir)/%,$(SourceFiles)) >> $(DEV_ROOT)/files.tmp

statistics : $(PackageListLoop)
	@$(List) $(DEV_ROOT)/files.tmp | xargs $(WordCount) $(WordCountOptions)
	@$(Delete) $(DEV_ROOT)/files.tmp
	$(Print) Done statistics.

# make pure
#$(Executable).pure :
#	$(Purify) $(PurifyOptions) $(CppCompiler) $(LinkOptions) $(LibDirs) \
#	$(LibList) $(ObjectFiles) -o $@
#
#pure : $(Executable).pure

#make ChangeLog
ChangeLog:
	$(DEV_ROOT)/scripts/svn2cl

# Execute
_runexe :
	$(Executable) $(RunParameters)

_runjava :
	$(JavaExecute) $(JavaRunOptions) $(JavaMainClass) $(RunParameters)

run : _runjava


ifdef $(DependencyFile)
-include $(DependencyFile)
endif
